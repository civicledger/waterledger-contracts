var QuickSort = artifacts.require("QuickSort");

contract('QuickSort', function(accounts) {

  var instance;

  beforeEach(async function() {
    instance = await QuickSort.new();
  });

  it("should sort array of 1000 ints", async function() {

    //1000 random ints
    let data = [
      335,838,177,709,608,965,924,25,152,73,504,815,4,310,996,584,953,850,249,582,425,116,488,668,9,998,756,469,693,162,824,479,555,876,958,57,823,806,287,309,22,829,451,866,207,403,799,44,157,520,573,45,931,199,329,855,96,599,754,833,79,461,978,679,342,283,188,373,610,318,63,256,314,712,410,744,354,432,98,870,783,702,132,481,20,512,726,781,118,150,788,997,735,244,370,16,17,502,685,166,961,360,279,617,338,204,60,411,514,384,292,205,144,217,427,734,394,872,643,740,576,540,246,528,483,558,659,822,51,849,74,825,259,353,879,676,992,492,963,218,960,796,609,88,14,471,578,773,779,100,683,426,881,214,160,597,946,117,192,631,351,414,467,667,785,308,836,89,197,6,484,903,267,532,248,241,39,614,852,943,398,402,636,698,753,932,106,766,119,215,129,83,922,885,665,262,125,605,592,509,890,591,496,225,108,934,390,428,993,148,981,819,358,664,649,607,69,749,291,856,586,367,708,871,240,873,285,729,886,559,446,340,276,221,19,778,868,807,980,603,986,928,974,976,962,618,771,332,944,793,66,184,415,93,87,105,674,897,319,938,258,656,80,289,456,400,710,809,387,770,782,487,34,94,421,31,230,219,525,909,882,168,939,1,983,765,926,372,519,662,38,905,728,158,189,349,653,385,950,460,628,626,859,979,666,861,47,990,545,316,568,315,442,672,818,136,888,521,478,49,908,194,620,307,382,348,235,50,321,434,828,109,90,252,703,359,845,11,13,794,485,375,969,527,300,436,910,337,224,391,907,774,453,392,843,364,732,652,757,84,181,929,232,511,678,464,535,86,159,917,459,55,574,790,203,447,473,122,142,198,695,630,498,290,418,54,273,510,419,458,777,476,716,865,639,689,15,362,489,542,862,345,71,901,271,237,462,386,687,769,658,302,265,625,831,758,500,797,915,92,444,506,556,723,677,58,450,494,405,812,27,784,124,493,699,675,810,994,835,644,91,937,210,531,301,893,176,955,123,352,10,895,623,569,632,339,848,37,786,406,171,417,830,899,798,324,654,984,530,682,508,554,772,919,973,547,282,776,266,884,941,515,602,736,146,120,719,750,263,561,431,501,651,368,202,422,534,713,454,331,661,404,780,546,536,67,169,206,155,365,853,991,495,238,987,588,233,548,46,305,789,503,813,61,842,275,26,914,472,791,762,684,346,220,253,457,170,585,255,755,420,5,731,3,408,647,874,681,864,916,491,670,272,128,379,236,701,274,311,673,539,156,745,964,443,725,748,505,200,474,412,24,140,81,737,764,449,2,303,875,356,121,114,52,413,733,808,820,906,847,378,567,517,323,715,383,911,85,660,216,187,982,657,466,40,65,705,686,523,172,526,1000,251,816,985,41,730,858,137,635,242,178,164,317,638,541,742,497,800,971,12,296,529,562,482,429,381,448,393,68,646,966,161,787,516,213,328,550,139,802,7,633,860,524,284,933,423,185,717,141,718,869,227,0,581,552,988,173,261,880,231,642,396,566,133,440,465,107,795,887,278,739,350,565,587,299,99,589,363,376,970,280,714,399,752,234,53,470,401,112,62,269,724,174,409,257,250,8,975,183,840,208,313,821,604,97,357,330,707,936,952,688,377,650,355,671,190,697,563,883,619,513,957,95,211,595,247,930,663,304,30,867,452,738,380,572,727,593,551,229,222,134,312,553,655,327,834,28,223,892,627,64,846,167,424,544,600,722,518,543,507,126,583,201,549,759,243,827,923,612,889,557,286,226,747,811,571,288,445,475,751,596,696,21,56,805,347,598,260,560,629,468,196,537,580,35,616,59,577,648,344,921,634,913,297,792,918,138,135,878,499,601,940,680,175,111,333,775,851,29,692,948,151,143,641,690,995,645,803,570,33,228,366,720,102,613,832,43,977,101,904,36,854,341,270,110,760,334,115,395,844,407,70,430,935,480,538,163,640,761,896,704,103,700,277,575,455,397,209,245,956,48,999,389,801,343,130,239,637,954,741,306,486,624,18,925,927,23,763,145,78,804,149,294,564,191,900,182,212,463,817,254,147,104,113,76,180,863,837,435,967,891,369,711,42,293,768,951,857,82,295,281,972,322,361,912,32,989,743,746,606,959,153,706,894,533,841,490,877,75,898,615,826,371,439,186,165,477,579,264,127,945,325,416,590,433,438,721,388,839,179,72,767,814,694,691,621,77,268,968,920,902,374,336,949,195,320,326,947,193,298,594,154,441,669,611,522,622,942,437
    ];

    var actual = await instance.sort(data);

    assert.equal(actual.length, 1000, "Should be 1000");
  });

  it("should sort array of ints", async function() {

    let data = [2, 4, 1, 5, 3, 6];

    var actual = await instance.sort(data);

    assert.equal(actual[0], 1, "Should be 1");
    assert.equal(actual[1], 2, "Should be 2");
    assert.equal(actual[2], 3, "Should be 3");
    assert.equal(actual[3], 4, "Should be 4");
    assert.equal(actual[4], 5, "Should be 5");
    assert.equal(actual[5], 6, "Should be 6");
  });

  it("should reverse sort array of ints", async function() {

    let data = [2, 4, 1, 5, 3, 6];

    var actual = await instance.reverseSort(data);

    assert.equal(actual[0], 6, "Should be 6");
    assert.equal(actual[1], 5, "Should be 5");
    assert.equal(actual[2], 4, "Should be 4");
    assert.equal(actual[3], 3, "Should be 3");
    assert.equal(actual[4], 2, "Should be 2");
    assert.equal(actual[5], 1, "Should be 1");
  });

  it("should sort array of ints by index", async function() {

    let indexes = [0, 1, 2, 3, 4, 5];
    let data = [2, 4, 1, 5, 3, 6];

    var actual = await instance.sortWithIndex(data, indexes);

    assert.equal(actual.length, 6, "Array length should be six")

    assert.equal(actual[0], 2, "Should be index 2");
    assert.equal(actual[1], 0, "Should be index 0");
    assert.equal(actual[2], 4, "Should be index 4");
    assert.equal(actual[3], 1, "Should be index 1");
    assert.equal(actual[4], 3, "Should be index 3");
    assert.equal(actual[5], 5, "Should be index 5");
  });

  it("should reverse sort array of ints by index", async function() {

    let indexes = [0, 1, 2, 3, 4, 5];
    let data = [2, 4, 1, 5, 3, 6];

    var actual = await instance.reverseSortWithIndex(data, indexes);

    assert.equal(actual.length, 6, "Array length should be six")

    assert.equal(actual[5], 2, "Should be index 2");
    assert.equal(actual[4], 0, "Should be index 0");
    assert.equal(actual[3], 4, "Should be index 4");
    assert.equal(actual[2], 1, "Should be index 1");
    assert.equal(actual[1], 3, "Should be index 3");
    assert.equal(actual[0], 5, "Should be index 5");
  });
});